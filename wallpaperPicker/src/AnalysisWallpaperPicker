WallpaperPicker 

初始化流程

根据源码，壁纸Activity加载主要分为以下步骤：
创建 HandlerThread 
```java
mLoaderThread = new HandlerThread("wallpaper_loader");
mLoaderThread.start();
mLoaderHandler = new Handler(mLoaderThread.getLooper(), this);
```
调用 init()，加载布局、控件初始化、初始化一些操作

```java



```


-> 
-> mCropView初始化触摸监听
-> 初始化壁纸偏移量 mWallpaperParallaxOffset
-> 初始化壁纸数据库 加载填充存储壁纸
-> 加载填充Resources壁纸
-> 异步加载填充live壁纸
-> 加载填充第三方壁纸
-> Gallery增加tile
-> 初始化mCropView布局改变监听事件
-> 初始化资源壁纸列表
-> 为删除items时创建过渡动画
-> 设置actionBar监听事件

BitmapRegionTileSource:图片区域平铺资源

壁纸预览流程
-> mCropView.addOnLayoutChangeListener
-> onClick(mWallpapersView.getChildAt(mSelectedIndex))
-> 根据当前壁纸信息Tag 获取 壁纸来源
-> 然后根据不同的壁纸来源调用 onClick
-> 以ResourceWallpaperInfo为例。
-> 创建图片输入流BitmapRegionTileSource.InputStreamSource
-> 裁剪图片
-> 创建 LoadRequest，初始化数据
-> 移除 MSG_LOAD_IMAGE 加载图片的消息
-> 发送加载图片的消息
->> 加载图片 流程
->> 判断bitmapSource 是否为空
->>> 如果为空 返回默认壁纸的DrawableTileSource
req.src不为空，调用BitmapSource的 loadInBackground
->>>> loadInBackground 数据流程
-----新建对象 InBitmapProvider
-----获取图片旋转角度getExifRotation
-----初始化图片大小解码器（主要获取宽高）
-----图片解码BitmapFactory.Options
/**
BitmapFactory.Options 详解

inPreferredConfig：
这个值是设置色彩模式，默认值是ARGB_8888，在这个模式下，一个像素点占用4bytes空间，一般对透明度不做要求的话，一般采用RGB_565模式，这个模式下一个像素点占用2bytes。
inJustDecodeBounds：
如果将这个值置为true，那么在解码的时候将不会返回bitmap，只会返回这个bitmap的尺寸。这个属性的目的是，如果你只想知道一个bitmap的尺寸，但又不想将其加载到内存时。这是一个非常有用的属性。
inSampleSize：
缩放比例，小于1时，当做1，缩放比例 = 1/inSampleSize。和图片的宽高及像素成正比。
inPreferQualityOverSpeed:
为true则优先保证Bitmap质量其次是解码速度
inMutable:
如果设置为true,将返回一个mutable的bitmap,可用于修改BitmapFactory加载而来的bitmap.
inBitmap ：
API Level 11开始。优化Bitmap的内存使用
**/
----如果InBitmapProvider 不为空
----计算当前像素 根据缩放比例计算 
----根据像素获取图片
----根据像素获取图片
----如果图片不为空设置 inBitmap 优化内存
----根据opts加载预览图片
----校验图片是否能应用在GL surface上
/**
GLUitls
 使用了getInternalFormat(mPreview)
 使用了getType(mPreview)
**/
----返回加载状态
->>>> loadInBackground 结束
->> 根据req.src实例化返回结果BitmapRegionTileSource
-----BitmapRegionTileSource
-----获取平铺尺寸
-----获取旋转角度
-----获取图片平铺解码器
-----初始化 BitmapFactory.Options
-----获取预览图片
-----实例化纹理BitmapTexture

->> 判断是否加载成功

Bitmap reusableBitmap = bitmapProvider.forPixelCount(expectedPixles);





-> mCropView 可见


